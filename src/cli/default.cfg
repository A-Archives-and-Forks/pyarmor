[pyarmor]

;; Pyarmor version
major = 8
minor = 0
patch = 1

;; Core version
core = 1
runtime = 1

;; Default timeout when send request to remote server for
;;     check Pyarmor license
;;     register Pyarmor license
timeout = 6

keyurl = 'https://api.dashingsoft.com/product/key/%s/query'
regurl = 'https://api.dashingsoft.com/product/key/activate/%s/'
buyurl = 'https://order.mycommerce.com/product?vendorid=200089125&productid=301044051'

[finder]
recursive = 0
findall = 0
;; pypaths =
;; includes =
;; excludes =
pyexts = .py .pyw

;; Data files need to copy to output path
;;   *.txt only copy .txt file
;;   * means all data files
;;   0 means nothing to copy
data_files = 0

[builder]
;; File encoding to read scripts
encoding = utf-8

;; The argument optimize specifies the optimization level of the
;; compiler; the default value of -1 selects the optimization level of
;; the interpreter as given by -O options. Explicit levels are 0 (no
;; optimization; __debug__ is true), 1 (asserts are removed, __debug__
;; is false) or 2 (docstrings are removed too).
optimize = 2
no_annotations = true
no_type_comments = true

enable_bcc = 0
enable_themida = 0
enable_refactor = 0
enable_jit = 0

;; call import
assert_call = 0
assert_import = 0

;; str name
mix_str = 0
mix_name = 0

enable_inline_plugin = 1

obf_module = 1
obf_code = 1
wrap_mode = 1

restrict_module = 1

relative_import = 0

;; Sometimes __file__ is not defined, replace it with __name__ to fix this issue
bootstrap_file = __file__

[refactor.extra_libs.builder]
;; How to obfuscate extra_libs for refactor
;;
;; If not enable, leave it as plain script
;;
enable = 1

obf_module = 1
obf_code = 1
wrap_mode = 0

[extra_libs.builder]
;; How to obfuscate dependent modules, incude system packages
;;
;; If not enable, leave it as plain script
enable = 0

obf_module = 1

;; For .pyc in PyInstaller bundle, co_code won't be obfuscated
obf_code = 0
wrap_mode = 0

[runtime]

;; Path to prebuilt runtime package
; share =


;; Generate extension for all Python3.7+
universal = false

;; The file ext only keep .so/.pyd, for example
;;     pyarmor_runtime.cpython-37m-darwin.so
;;     if simple_extension_name == 1 then
;;     pyarmor_runtime.so
simple_extension_name = 0

;; Enable outer runtime key, for example
;;   pyarmor.key
; outer =

;; Pyarmor raises PyExc_RuntimeError by default
;;     0    raise PyExc_RuntimeError
;;     1    raise PyExc_SystemExit
;;     2    call libc exit to quit directly
; on_error =

;; Check runtime key periodically, unit is hour
; period = 0

;; Expired runtime key. Check local time if there is leading '.',
;; otherwise check ntp time
;;
;;     30
;;     2025-12-31
;;
;;     .30
;;     .2025-12-30
;;
; expired =

;; Check ntp time by this server
nts = pool.ntp.org
nts_timeout = 3

;; Bind runtime key to multiple machines, one line one machine
; machines =

;; Bind runtime key to Python interperter. Each line defines a rule,
;; match all the rules. The rule formats
;;
;;      s: symbol symbol DIFF
;;      S: symbol symbol xxxxxx(md5)
;;      f: name SIZE
;;      F: name xxxxxxxx(md5)
;;      m: name SIZE
;;      M: name xxxxxxxx(md5)
; interps =

;; Insert runtime hooks
; hooks = hooks.py

;; Enable timer
; timer = 1

;; Target platforms
; platforms =

;; If there are customized messages
; messages = msg.cfg:utf-8

[refactor]
enables = builtins import function class attribute
includes =
excludes =

[assert.call]

[assert.import]

[mix.str]

;; Do not mix short string
min = 4

[mix.name]

[windows.x86_64.bcc]
cc = clang.exe
cflags = -O3 -Wno-unsequenced -fno-asynchronous-unwind-tables -fno-unwind-tables --target=x86_64-elf-windows -c

[linux.x86_64.bcc]
linux_x86_64_cflags = -O3 -Wno-unsequenced -fno-asynchronous-unwind-tables -fno-unwind-tables -fPIC -fno-stack-protector -c

[linux.aarch64.bcc]
linux_aarch64_cflags = -O3 -Wno-unsequenced -fno-asynchronous-unwind-tables -fno-unwind-tables -fPIC -fno-stack-protector -shared -nostdlib
linker_script = ${bcc:linker_script}

[darwin.x86_64.bcc]
apple_intel_cflags = -O3 -Wno-unsequenced -fno-asynchronous-unwind-tables -fno-unwind-tables --target=x86_64-elf-gnu_linux -fPIC -c

[darwin.aarch64.bcc]
apple_m1_cflags = -O3 -Wno-unsequenced -fno-asynchronous-unwind-tables -fno-unwind-tables --target=arm64-macho-darwin -fPIC -fno-addrsig -fno-stack-protector -shared -nostdlib -lsystem -T${bcc:tempdir}/darwin.aarch64.ldscript
linker_script = ${bcc:linker_script}

[bcc]
UNSUPPORTED_FUNCTIONS = exec eval super locals
UNSUPPORTED_NODES = AsyncFunctionDef AsyncFor AsyncWith Await Yield YieldFrom GeneratorExp NamedExpr MatchValue MatchSingleton MatchSequence MatchMapping MatchClass MatchStar MatchAs MatchOr

;; Do not convert listed modules
; excludes =

;; Use opcode CALL_FUNCTION_EX to patch call
;; Global option, all scripts must be same
call_function_ex = 0

;; Generate bcc function to show right lineno in traceback
;; If disable, lineno is always function definition lineno
trace_lineno = 1

keep_nest_name = 0

;; Do not convert lambda to bcc
ignore_lambda = 0

;; Use op_mkfunc2 to build unsupported functions
enable_pure_function = 1

;; Convert comprehensions to bcc code
enable_comprehension = 1

tempdir = .pyarmor/bcc
linker_script = /* pyarmor bcc mode link script */
    SECTIONS {
       . = 0x1000;
       PROVIDE (_scode = .);
       .text           : { *(.text) }
       .data           : { *(.data) }
       .rodata         : { *(.rodata) }
       .got            : { *(.got) }
       .got.plt        : { *(.got.plt) }
       .imptbl         : { *(.imptbl) }
       .explt          : { *(.explt) }
       PROVIDE (_ecode = .);
       .note.gnu.build-id      : { *(.note.gnu.build-id) }
       .note.gnu.property      : { *(.note.gnu.property) }
       .gnu.hash               : { *(.gnu.hash) }
       .dynsym                 : { *(.dynsym) }
       .dynstr                 : { *(.dynstr) }
       .rela.dyn               : { *(.rela.dyn) }
       .dynamic                : { *(.dynamic) }
       .comment                : { *(.comment) }
    }
